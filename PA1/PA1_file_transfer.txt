Programming Assignment One - UDP Sockets
Introduction

In this assignment, you will build two programs in C:

a client which will accept user input and then send requests over UDP
a server which will returns responses to those commands, again over UDP
The client and server will implement functionality similar to the File Transfer ProtocolLinks to an external site., better known as FTP.  FTP provides the means for a client to transfer files to and from a remote server.  In our case, we will implement a subset of some typical FTP commands and use Sockets to communicate between the client and server.

 

The client
On invocation, the client must take two command line arguments: an IP address and port number where the server side code is running:

$ gcc uftp_client.c -o client # Compile your c-program
$ ./client 192.168.1.101 5001 # Running your client with given server IP and port number
The IP address can be obtained using hostname -I on the system where your server is running.

Your client should prompt the user to type any of the following commands:

get [file_name]
put [file_name]
delete [file_name]
ls
exit
After verifying that the syntax of the user's input is correct, your client will send a datagram to the server indicating which operation is required and any other data or parameters needed to satisfy the request.  The client must then wait for the server's response.  If the server fails to respond after an appropriate amount of time, an error message must be emitted to stderr.

Once the server responds, your client will print an appropriate message to stdout, indicating the result of the requested operation.  In the case of a put, the client should source the indicated file in the current working directory.  In the case of a get, the client should store the returned file in the current working directory.   For the exit command, the client should exit gracefully after the server acknowledges that the client is done.

 

The server
The server must take one command line argument: a port number for the server to use. You should select port #'s > 5000:

$ gcc uftp_server.c -o server # Compile your c-program
$ ./server 5001 # Running your server with port number 5001
Your server should wait for a UDP connection after binding to requested port (ie. 5001 in the example above).  Depending on the commands received, the server responds to the client's request in the following manner:

get [file_name] - the server transmits the requested file to the client

put [file_name] - the server receives the transmitted file from the client and stores it locally

delete [file_name] - the server deletes the file if it exists

ls - the server should search all the files it has in its current working directory and send a list of all these files to the client

exit - the server should acknowledge that the client is done with a goodbye message

For any other command, the server should respond that the given command was not understood.  In all of these cases, if the server is unable to perform an operation, it should respond to the client indicating a failure. 

The following diagram briefly outlines the interactions described above:

 

Image_001.jpg

 

Getting Started
We've provided some example code to get you started.  Download PA1_udp_example.tar Download PA1_udp_example.tar, extract the contents and compile the example client and server code:

$ tar -xvf PA1_udp_example.tar
$ cd udp
$ gcc udp_client.c -o client
$ gcc udp_server.c -o server
Feel free to use these files as a baseline for your PA1 design.  To run these examples:

$ ./server [port_number]
$ ./client [ip_address] [port_number]
You can test locally by running both the client and the server on the same machine.  In this case, you can type “localhost” or "127.0.0.1" in place of the IP address.

 

Header Files
Examine the code in the provided programs.  The header files needed for the socket programming are:

sys/socket.h : The header file socket.h includes a number of definitions of structures needed for sockets

netinet/in.h : The header file in.h contains constants and structures needed for internet domain addresses

arpa/inet.h : The header file contains definitions for internet operations

netdb.h : This header file contains definitions for network database operations
 

Functions
A brief explanation of some of the functions used in the code is provided here.  However, for in depth understanding of the functions, please read the manpages for these functions.

socket() : The input parameters of the function lets you determine which type of socket you want in your application. It may be a TCP or UDP socket. The function returns a socket descriptor which can prove helpful later system calls or -1 on error. A quick look at the function:

sockfd = socket(PF_INET,SOCK_DGRAM,0);

sockfd is a UDP socket.

 

bind() : Once we have our socket ready, we have to associate it with a port number on the local machine. It will return -1 on error. When calling bind function, it should be noted that ports below 1024 are reserved. Any port number above 1024 and less than 65535 can be used. A quick reference:

bind(sockfd, (struct sockaddr *)&my_addr, sizeof my_addr);

 

sendto(): This function is used to send the data. Since it is used in connectionless datagrams, the input parameter of this function includes the destination address. It returns the number of bytes sent on success and -1 on error.

ssize_t sendto( int sockfd, void *buff, size_t nbytes, int flags, const struct sockaddr* to, socklen_t addrlen);

“buff” is the address of the data (nbytes long).

“to” is the address of a sockaddr containing the destination address.

 

recvfrom() : This function is used to receive the data from an unconnected datagram socket. The input paramters contain the address of the originating machine. It returns the number of bytes received on success and -1 on error

ssize_t recvfrom( int sockfd, void *buff, size_t nbytes, int flags, struct sockaddr* from, socklen_t *fromaddrlen);

 

Note: It will be beneficial if you review Beej’s Socket Programming GuideLinks to an external site. before starting the actual assignment.

 

Submission
You should test your programs thoroughly so that they do not crash or hang.  Your code must be organized and clear with comments/explanations for your functions and arguments.  The code that you turn in for this programming assignment must be your own original work and must compile and run on the standard Ubuntu 22.04 VM.  Please upload the following files to Canvas before the due date:

uftp_client.c
uftp_server.c
